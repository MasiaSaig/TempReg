#ifndef _TEMPERATURE_REGULATOR_H_
#define _TEMPERATURE_REGULATOR_H_

#include <LPC17xx.h>

#define MAX_TEMPERATURE 90
#define MIN_TEMPERATURE -40

extern float Amplification_P; //!< Amplification of proportional gain, used in PID.
extern float Amplification_I; //!< Amplification of integral gain, used in PID.
extern float Amplification_D; //!< Amplification of derivative gain, used in PID.

extern const uint32_t deltaTime_us;   //!< Time interval between, temperature reads.
extern float sumTemperatureError;   //!< Sum of temperature errors, used to calculate integral in PID.
extern int16_t setTemperature;				//!< Temperature set by user, which regulator should aim to achive.
extern float temperatureError;      //!< Temperature error, between setTemperature and last read temperature.
#define MAX_HEATER_POWER 4.39
extern float heaterPower;          //!< Power generated by heater, based on last read temperature, its error and electrical circut parameters.

// represents type of heater regulator: either proportional or 2-positional 
extern uint8_t PIDControl; 						//!< represents type of heater regulator: either proportional or 2-positional 


/** 
 * Calculates output, to accurately stabilize temperature around setTemperature. 
 *
 * @return void
 */
uint16_t calculatePID(void);
/**
 * Turns heater ON, if temperature is lower than setTemperature and turns it OFF, if temperature is above setTemperature. 
 *
 * @return void
 */
void twoPositionalControl(void);

#endif
